I"ö1<h1 id="problem-statement">Problem Statement</h1>

<p>Problem Link: <a href="https://leetcode.com/problems/the-skyline-problem/">The Skyline Problem -238</a></p>

<h1 id="approach">Approach</h1>

<p>The very rudimentary solution would be to traverse all the ranges and update the values of the x coordinates with maximum heights from [li,ri);</p>

<p>But Since the values of cooridinates range from 0 to 1e9, the normal approach might result in a memory limit exceeded outcome.</p>

<h2 id="solution-1">Solution 1:</h2>
<h3 id="prerequisite">Prerequisite:</h3>
<p><a href="https://codeforces.com/blog/entry/23180">Coordinate Compression</a></p>

<p>Coordinate Compression technique is as simple as it sounds.Although the range of endpoints is large, the number of values in the range remain limited. So we map the values to a specific value in a one-one mapping.
So if Range =&gt; LARGE and Quantity =&gt; small;</p>

<p>You might wanna give it a thought.</p>

<h3 id="outline">Outline:</h3>
<p>Now the first step to approach the problem should be Coordinate Compression (No points for guessing now :P).
After Mapping all the present coordinates.The solution is more or less similar to rudimentary solution with some optimizations.</p>

<p>For optimising the solution we have to maintain a vector array points which stores all the mapped endpoints in a sorted order(Weâ€™ll know soon).</p>

<p>Now we rearrange the given vector input to be of the form (b[2],b[0],b[1]) and sort it according to first item i.e height.After doing that we traverse the point in decreasing order of the heights and also removing them simultaneously because they wonâ€™t be updated further (We sorted by height remember? So save time here or you get stuck at the last testcase.).</p>

<p>Now at last traverse through the points and simultaneously pushing the answer only when height changes i.e. h[i]!=h[i-1];</p>

<p>=</p>
<h1 id="code-">CODE :</h1>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">getSkyline</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">b1</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//to determine unique endpoints</span>
        <span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">;</span>
        <span class="c1">//stores all the mapped points</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">points</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">b1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
            <span class="n">s</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="c1">// m maps x0-&gt;x1 and b maps x1=&gt;x0;</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">i</span><span class="o">:</span><span class="n">s</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">b</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
           <span class="n">points</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
            <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">//coordinate compression finished</span>

        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">v</span><span class="p">;</span>
        <span class="c1">//rearrange to sort by heights;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">b1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">x1</span><span class="p">;</span>
            <span class="n">x1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">b1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span>
            <span class="n">x1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">b1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
            <span class="n">x1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">b1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
            <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">//sort by heights.</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="c1">//a mapping to assign heights</span>
        <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">h</span><span class="p">;</span>
        <span class="c1">//traverse in ddecreasing order of heights.</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//traverse in the range [li,ri);</span>
            <span class="k">auto</span> <span class="n">x</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">points</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">points</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]);</span>
            <span class="k">auto</span> <span class="n">y</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">points</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">points</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]]);</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">j</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="n">j</span><span class="o">!=</span><span class="n">y</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">h</span><span class="p">[</span><span class="o">*</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">h</span><span class="p">[</span><span class="o">*</span><span class="n">j</span><span class="p">]);</span>
              
            <span class="p">}</span>
            <span class="c1">//erase the points to save some time !important or 40th TC won't run.</span>
            <span class="n">points</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
          
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">ans</span><span class="p">;</span>
        <span class="c1">//traversing through the mapped points to find the answer;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">x</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">!=</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]});</span>
            <span class="p">}</span>
          
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</code></pre></div></div>

:ET